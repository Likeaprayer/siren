services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nodejs_app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB:-siren_db}
      - DB_USER=${POSTGRES_USER:-root}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-Madara123}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET:-3bfa0b48-dd8b-4823-8f81-528d177cbd72}
    volumes:
      - ./src:/app/src
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be fully ready...' &&
        sleep 3 &&
        echo 'Running database migrations...' &&
        npm run migrate-up &&
        npm run dev
      "

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-Madara123}
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_DB=${POSTGRES_DB:-siren_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB:-siren_db}"]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 10s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data